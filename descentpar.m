load "magma/package/Geometry/Sch/search.m";
//SetVerbose("SixDescent", true);
//SetVerbose("TwelveDescent", true);
//SetVerbose("PointSearch", true);
SetClassGroupBounds("GRH"); // finding is conditional but once we find it verification should be fine
//as:=[2 * 3 * 5 * 7 * 11^4 * 13^5,-1 * 2 * 3 * 5^4 * 7^2 * 11^5 * 13^5, -1 * 2^2 * 5^5 * 7^2 * 11^5 * 13^5, -1 * 2^2 * 3 * 5^5 * 7^5 * 11^5 * 13^2, -1 * 2^3 * 3 * 5^5 * 7^5 * 11^4 * 13^4, -1 * 2^5 * 5 * 7^5 * 11^5 * 13^5, -1 * 2^5 * 3 * 5^2 * 7^3 * 11^5 * 13^4, -1 * 2^5 * 3 * 5^4 * 7^4 * 11^3 * 13^3, -1 * 2^5 * 3 * 5^5 * 7^5 * 11^3 * 13^4, -1 * 2^5 * 3 * 5^5 * 7^5 * 11^4 * 13^4, 2 * 3 * 5^5 * 7^3 * 11^4 * 13^5, 2 * 3^2 * 7^2 * 11^4 * 13^3, 2^4 * 3^2 * 5^4 * 7^3 * 11^4 * 13^5, 2^5 * 3 * 5^3 * 7^4 * 11^4 * 13^5, 2^5 * 3 * 5^3 * 7^5 * 11^4 * 13^3, 2^5 * 3 * 5^5 * 7^2 * 11^4 * 13];
//knownps:=<[4941337679741491064429512519/742237946570185751418121, -766457799689627255949180984152043145355833/639461983618113802046307351141195419],[1963894079540552371/3245823814689, 2683052011393073238870907831/5847731363548552113], [4673064332249069/11390652529, 218903913730675492675747/1215690172462583], [4510594091013949/17478690849, 13019641050544104479957/2310805281073743], [37043097215569/41951529, 109147783566644890003/271720053333], [143162954733247405215788608015445578169/73398335298620692904081769119641, 1694293661394930797780305632789998796261344421257345851107/628824298651484271466681853752575269811506047811], [319863091591218888917510737150172334097838449/1669501173923668586709672636572257925376, 3886656992865546102825759485173965993441747463072961303351306059657/68215032935333125344326857862692535321153921157292560666624], [7426886401/225, 640044498841649/3375], [111107971765704001/120555478521, 32183730846284533872275249/41858188252754931], [135140532916699924441/104917123324836, 181907666284354628168945159011/1074656232006702613416], [5448067498142314824712842679/728165097486381254569, 402144232506540972827738158841345525948033/19649196131466754762755293982997], [-2057, 140239], [-480975, 237792225], [-6138935/16, 20252916475/64], [-519455/4, 524431825/8], [-13991, 243277]>;

//as:=[21564697440, 64543243114350000, -351881940410, -15913028381250, 6487423410468000, 1141581170730, -19984965000, -527103152100525000, 1228166940000, -17154244594987500, 290294004000, 7666954939644000, -306556250, -10987718768276250, 227018982815625, 34960923353606250, 2797895100000, -1306990064380000, -35498783712892500, 28370656314, -59164639521487500, 167812432097310000, 38387120772000, -191673873491100000, -421261260420000, -36625729227587500, 156624936624156000, -77867511105759375, -160801601600800160, -16743190504040, -3786536929375200, 108005563575000, -2108412608402100000, 43562243975250];
//as := [-35680828757574000,21564697440, 64543243114350000, -351881940410, -15913028381250, -19984965000, 1228166940000, 290294004000, 7666954939644000, -306556250, 227018982815625, -1306990064380000, -35498783712892500, -59164639521487500, 38387120772000, -77867511105759375, -16743190504040, 108005563575000, 43562243975250];

function docurve(a)
    E := EllipticCurve([0,a]); // Define the mordell curve

    Ps,boo1,boo2:=Generators(E : Effort := 3, HeightBound := 20);

    if boo1 then
    	return Ps[1];
    end if;


    td,tdmaps := TwoDescent(E); 
    EP := E!0;

    while EP eq E!0 do
        for it in [1..#td] do
            for thcov in ThreeDescentByIsogeny(E) do
                FD := FourDescent(td[it]);
                for iF in [1..#FD] do
                    Cs,ms:=TwelveDescent(thcov,FD[iF]);
                    _,ecmap:=AssociatedEllipticCurve(FD[iF] : E:=E);
                    for i in [1..#Cs] do
                        print "Searching for pts on ",i;
                        ps:= PointSearch(Cs[i],3*10^16 : Dimension:=1);
                        print ps;
                        for P in ps do
                            EP := ecmap(ms[i](P));
                            print EP;
                            sat := Saturation([EP]);
                            if #sat gt 0 then
                                EP:=sat[1];
                                //EP:=sat[2];
                                
                                // Reuceheight
                                //_,D:=LLLBasisMatrix(LatticeWithGram(HeightPairingMatrix([knownP, EP])));
                                //redknP := D[1][1] * knownP + D[1][2] * EP;
                                //if redknP ne knownP then
                                //    print "weird knownP red by P", redknP, knownP;
                                //end if;
                                //redEP := D[2][1] * knownP + D[2][2] * EP;
                                //EP := redEP;
                                break it;
                            end if;
                        end for;
                    end for;
                end for;
            end for;
        end for;
        if EP ne E!0 then
            print "found point ", EP;
        end if;
    end while;
    return EP;
end function;
